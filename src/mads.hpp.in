/*
  __  __ ___ ____   ___  ____   ____ ___ ____
 |  \/  |_ _|  _ \ / _ \/ ___| / ___|_ _/ ___|
 | |\/| || || |_) | | | \___ \| |    | | |
 | |  | || ||  _ <| |_| |___) | |___ | | |___
 |_|  |_|___|_| \_\\___/|____/ \____|___\____|

Mads namespace main header file.
Include this file to get it all!

Author(s): Paolo Bosetti
*/
#ifndef MADS_HPP
#define MADS_HPP

#if defined _WIN32 && !defined NOMINMAX
#define NOMINMAX
#endif

#include <chrono>
#include <exception>
#include <iomanip>
#include <map>
#include <sstream>
#include <string>
#include <cmath>

/*
  ____        __ _
 |  _ \  ___ / _(_)_ __   ___  ___
 | | | |/ _ \ |_| | '_ \ / _ \/ __|
 | |_| |  __/  _| | | | |  __/\__ \
 |____/ \___|_| |_|_| |_|\___||___/

*/

#define LIB_NAME "@APP_NAME@"
#define LIB_VERSION "@PROJECT_VERSION@"
#define LIB_VERSION_CHECK "@PROJECT_VERSION_CHECK@"
#define MADS_PREFIX "@PREFIX@"

#define LOGGER_STATUS_TOPIC "logger_status"

#ifndef HOST_NAME_MAX
#define HOST_NAME_MAX 255
#endif

// binnng of sampled data at this FPS
#define MADS_FPS 25

#define METADATA_TOPIC "agent_event"

#define SETTINGS_PATH "mads.ini"
#define FRONTEND_URI "tcp://localhost:9090"
#define BACKEND_URI "tcp://localhost:9091"
#define SETTINGS_URI "tcp://localhost:9092"

#define BROKER_FRONTEND "tcp://*:9090"
#define BROKER_BACKEND "tcp://*:9091"
#define BROKER_SETTINGS "tcp://*:9092"

#define SOCKET_TIMEOUT 200   // Milliseconds
#define CONNECT_DELAY_MS 250 // Milliseconds
#define CONNECT_DELAY chrono::milliseconds(CONNECT_DELAY_MS)

#define DEFAULT_ENDPOINT_BIND "tcp://*:9000"
#define DEFAULT_ENDPOINT "tcp://localhost:9000"
#define DEFAULT_TOPIC "mads"

#define FORMAT_PLAIN "plain"
#define FORMAT_COMPRESSED "snappy"

#define UNUSED(x) (void)(x)

#ifdef __linux__
#define THIS_EXEC_DIR std::filesystem::canonical("/proc/self/exe").parent_path()
#else
#define THIS_EXEC_DIR fs::path(argv[0]).parent_path()
#endif

// Used for common CLI options in agent executables
#define SETUP_OPTIONS(options, Klass)                                          \
  options.add_options()                                                        \
    ("s,settings", "Settings file path/URI", value<string>())                  \
    ("S,save-settings", "Save settings to ini file", value<string>())          \
    ("v,version", "Print version")                                             \
    ("h,help", "Print usage");                                                 \
  auto options_parsed = options.parse(argc, argv);                             \
  if (options_parsed.count("help")) {                                          \
    cout << argv[0] << " ver. " << LIB_VERSION << endl;                        \
    cout << options.help() << endl;                                            \
    return 0;                                                                  \
  }                                                                            \
  if (options_parsed.count("version")) {                                       \
    cout << LIB_VERSION << endl;                                               \
    return 0;                                                                  \
  }                                                                            \
  if (options_parsed.count("s") != 0) {                                        \
    settings_uri = options_parsed["s"].as<string>();                           \
  }                                                                            \
  if (options_parsed.count("S") != 0) {                                        \
    string fname = options_parsed["S"].as<string>();                           \
    Klass obj(argv[0], settings_uri);                                          \
    try {                                                                      \
      obj.save_settings(fname);                                                \
    } catch (const AgentError &e) {                                            \
      cout << fg::red << "Error saving local settings: " << e.what()           \
           << fg::reset << endl;                                               \
      return EXIT_FAILURE;                                                     \
    } catch (const std::exception &e) {                                        \
      cout << fg::red << "Error saving settings: " << e.what() << fg::reset    \
           << endl;                                                            \
      return EXIT_FAILURE;                                                     \
    }                                                                          \
    cout << fg::magenta << "Settings saved to " << fname << fg::reset << endl; \
    return EXIT_SUCCESS;                                                       \
  }

/*
  _____                     _       __
 |_   _|   _ _ __   ___  __| | ___ / _|___
   | || | | | '_ \ / _ \/ _` |/ _ \ |_/ __|
   | || |_| | |_) |  __/ (_| |  __/  _\__ \
   |_| \__, | .__/ \___|\__,_|\___|_| |___/
       |___/|_|
*/

#if defined(_WIN32) && !defined(SWIGPYTHON)
typedef long int ssize_t;
#endif
typedef double data_t;

/*
  _   _
 | \ | | __ _ _ __ ___   ___  ___ _ __   __ _  ___ ___
 |  \| |/ _` | '_ ` _ \ / _ \/ __| '_ \ / _` |/ __/ _ \
 | |\  | (_| | | | | | |  __/\__ \ |_) | (_| | (_|  __/
 |_| \_|\__,_|_| |_| |_|\___||___/ .__/ \__,_|\___\___|
                                 |_|
*/

namespace Mads {

/**
 * @brief Library version.
 *
 */
static std::string version() { return LIB_VERSION; }

/**
 * @brief Global flag for stopping the main loop in Mads agents.
 *
 */
static bool running = true;

/**
 * @brief Enumeration of event types for agents.
 *
 */
enum class event_type { marker = 0, marker_in, marker_out, startup, shutdown };

/**
 * @brief Enumeration of message types for agents.
 *
 */
enum class message_type { none = 0, json = 1, blob };

/**
 * @brief Map of event types to strings.
 *
 */
static const std::map<event_type, std::string> event_map = {
    {event_type::marker, "marker"},
    {event_type::marker_in, "marker in"},
    {event_type::marker_out, "marker out"},
    {event_type::startup, "startup"},
    {event_type::shutdown, "shutdown"}};

// This results in duplicate definition link error in the GUI
#ifndef MADS_QAGENT_H
std::string event_name(event_type type) {
  return event_map.at(type);
}
#endif // MADS_QAGENT_H

/**
 * @brief Get the ISODate time object
 *
 * @param time
 * @return string
 */
static std::string
get_ISODate_time(const std::chrono::system_clock::time_point &time, int32_t offset = 0) {
  time_t tt = std::chrono::system_clock::to_time_t(time);
  tm *tt2 = localtime(&tt);
  std::stringstream ss;

  // Get milliseconds hack
  auto timeTruncated = std::chrono::system_clock::from_time_t(tt);
  long long ms = std::chrono::duration_cast<std::chrono::milliseconds>(
                     time - timeTruncated)
                     .count();

  ss << std::put_time(tt2, "%FT%T")                    // "2023-03-30T19:49:53"
     << "." << std::setw(3) << std::setfill('0') << ms // ".005"
     << std::put_time(tt2, "%z"); // "+0200" (time zone offset, optional)

  return ss.str();
}

static double timecode(const std::chrono::system_clock::time_point &now, unsigned int fps = 25) {
  time_t now_c = std::chrono::system_clock::to_time_t(now);
  tm *lt = localtime(&now_c);
  double fct = 1000.0 / fps;
  auto tt = std::chrono::system_clock::from_time_t(now_c);
  long long ms =
      std::chrono::duration_cast<std::chrono::milliseconds>(now - tt).count();
  ms = floor(ms / fct) * fct; // Round to the nearest 25ms

  return lt->tm_hour * 3600 + lt->tm_min * 60 + lt->tm_sec + ms / 1000.0;
}

/*
   ____ _
  / ___| | __ _ ___ ___  ___  ___
 | |   | |/ _` / __/ __|/ _ \/ __|
 | |___| | (_| \__ \__ \  __/\__ \
  \____|_|\__,_|___/___/\___||___/

*/

/**
 * @brief AgentError exception class.
 *
 */
#ifndef SWIG
class AgentError : public std::exception {
public:
  AgentError(std::string msg) : _msg(msg) {}
  const char *what() const noexcept override { return _msg.c_str(); }

private:
  std::string _msg;
};
#endif

} // namespace Mads

#endif // MADS_HPP